{% extends 'knp_menu.html.twig' %}

{% macro attributes(attributes) %}
	{% for name, value in attributes %}
		{%- if value is not none and value is not same as(false) -%}
			{{- ' %s="%s"'|format(name, value is same as(true) ? name|e : value|e)|raw -}}
		{%- endif -%}
	{%- endfor -%}
{% endmacro %}

{% block label %}
	{%- set translation_domain = item.extra('translation_domain', 'messages') -%}
	{%- set label = item.label -%}
	{%- if translation_domain is not same as(false) -%}
		{%- set label = label|trans(item.extra('translation_params', {}), translation_domain) -%}
	{%- endif -%}
	{%- if options.allow_safe_labels and item.extra('safe_label', false) %}{{ label|raw }}{% else %}{{ label }}{% endif -%}
{% endblock %}

{% block spanElement %}
	{% import _self as knp_menu %}
	<div class="no-link" title="{{ block('label') }}">
		{% if knp_menu.attributes(item.labelAttributes)|length > 0 and item.labelAttributes|length > 0 %}
			<i {{ knp_menu.attributes(item.labelAttributes) }}></i>
		{% endif %}
		<span>{{ block('label') }}</span>
	</div>
{% endblock %}

{% block linkElement %}
	{% import _self as knp_menu %}
	<div class="is-link">
		<a href="{{ item.uri }}"{{ knp_menu.attributes(item.linkAttributes) }}>
			<i {{ knp_menu.attributes(item.labelAttributes) }}></i>
			<span>{{ block('label') }}</span>
		{% if item.extra('badge', null) is not empty %}
			<div class="badge" id="badge-{{ item.extra('badge') }}">{{ item.extra('badge-data', '') }}</div>
		{% endif %}
		</a>
	</div>
{% endblock %}


{% block list %}
	{% if item.hasChildren and options.depth is not same as(0) and item.displayChildren %}
		{% import _self as knp_menu %}
		<ul{{ knp_menu.attributes(listAttributes|merge({'class': [
			options.rootClass is defined ? options.rootClass : '',
			options.listClass is defined ? options.listClass : '',
			listAttributes.class is defined ? listAttributes.class : ''
		]|join(' ')
		}))  }}>
			{% set options = options|merge({'rootClass': '' }) %}
			{{ block('children') }}
		</ul>
	{% endif %}
{% endblock %}

{% block item %}
	{% if item.displayed %}
		{# building the class of the item #}
		{%- set classes = item.attribute('class') is not empty ? [item.attribute('class')] : [] %}
		{%- if matcher.isCurrent(item) %}
			{%- set classes = classes|merge([options.currentClass]) %}
		{%- elseif matcher.isAncestor(item, options.matchingDepth) %}
			{%- set classes = classes|merge([options.ancestorClass]) %}
		{%- endif %}
		{%- if item.actsLikeFirst %}
			{%- set classes = classes|merge([options.firstClass]) %}
		{%- endif %}
		{%- if item.actsLikeLast %}
			{%- set classes = classes|merge([options.lastClass]) %}
		{%- endif %}
		
		{# Mark item as "leaf" (no children) or as "branch" (has children that are displayed) #}
		{% if item.hasChildren and options.depth is not same as(0) %}
			{% if options.branch_class is not empty and item.displayChildren %}
				{%- set classes = classes|merge([options.branch_class]) %}
			{% endif %}
		{% elseif options.leaf_class is not empty %}
			{%- set classes = classes|merge([options.leaf_class]) %}
		{%- endif %}
		
		{%- set attributes = item.attributes %}
		{%- if classes is not empty %}
			{%- set attributes = attributes|merge({'class': classes|join(' ')}) %}
		{%- endif %}
		{# displaying the item #}
		{% import _self as knp_menu %}
		<li{{ knp_menu.attributes(attributes|merge({'class': [
			options.itemClass is defined ? options.itemClass : '',
			attributes.class is defined ? attributes.class : ''
		]|join(' ')
		}))  }}>
			{%- if item.uri is not empty and (not matcher.isCurrent(item) or options.currentAsLink) %}
				{{ block('linkElement') }}
			{%- else %}
				{{ block('spanElement') }}
			{%- endif %}
			{# render the list of children#}
			{%- set childrenClasses = item.childrenAttribute('class') is not empty ? [item.childrenAttribute('class')] : [] %}
			{%- set childrenClasses = childrenClasses|merge(['menu_level_' ~ item.level]) %}
			{%- set listAttributes = item.childrenAttributes|merge({'class': childrenClasses|join(' ') }) %}
			{{ block('list') }}
		</li>
	{% endif %}
 {% endblock %}